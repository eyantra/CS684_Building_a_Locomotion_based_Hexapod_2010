                        .module keyboard.c
                        .area text(rom, con, rel)
 0000                   .dbfile D:\BUILDI~1\keyboard.c
                        .area data(ram, con, rel)
 0000                   .dbfile D:\BUILDI~1\keyboard.c
 0000           L2:
 0000                   .blkb 1
                        .area idata
 0000 0F                .byte 15
                        .area data(ram, con, rel)
 0001                   .dbfile D:\BUILDI~1\keyboard.c
                        .area text(rom, con, rel)
 0000                   .dbfile D:\BUILDI~1\keyboard.c
 0000                   .dbfunc e keyboard_control _keyboard_control fV
                        .area efunc_lit(rom, con, rel)
 0000           L22:
 0000 004C00            .eaddr `L12
 0003 005A00            .eaddr `L14
 0006 007500            .eaddr `L18
 0009 003D00            .eaddr `L9
 000C 003800            .eaddr `L8
 000F 007E00            .eaddr `L3
 0012 007E00            .eaddr `L3
 0015 007E00            .eaddr `L3
 0018 007E00            .eaddr `L3
 001B 007E00            .eaddr `L3
 001E 006600            .eaddr `L16
 0021 006C00            .eaddr `L17
 0024 007E00            .eaddr `L3
 0027 007E00            .eaddr `L3
 002A 007E00            .eaddr `L3
 002D 005D00            .eaddr `L15
 0030 007E00            .eaddr `L3
 0033 007E00            .eaddr `L3
 0036 003000            .eaddr `L6
 0039 005100            .eaddr `L13
 003C 007E00            .eaddr `L3
 003F 007E00            .eaddr `L3
 0042 003300            .eaddr `L7
 0045 004200            .eaddr `L10
 0048 007E00            .eaddr `L3
 004B 004700            .eaddr `L11
                        .area text(rom, con, rel)
 0000                   .dbsym s change L2 c
                        .even
 0000           _keyboard_control::
 0000 4A93              st -y,R20
 0002 5A93              st -y,R21
 0004 2297              sbiw R28,2
 0006                   .dbline -1
 0006                   .dbline 69
 0006           ; /***
 0006           ; Author : Srijit Dutt
 0006           ; Date Sun 07 Nov 2010 02:42:38 PM IST 
 0006           ; 
 0006           ; keyboard.c : File contains various advanced motion functions for the hexapod
 0006           ; Please include keyboard.h file to call function from this file
 0006           ; 
 0006           ; The various functions are : 
 0006           ; keyboard_control
 0006           ; */
 0006           ; 
 0006           ; /*********************************************************************************
 0006           ; 
 0006           ;    Copyright (c) 2010, ERTS Lab IIT Bombay erts@cse.iitb.ac.in               -*- c -*-
 0006           ;    All rights reserved.
 0006           ; 
 0006           ;    Redistribution and use in source and binary forms, with or without
 0006           ;    modification, are permitted provided that the following conditions are met:
 0006           ; 
 0006           ;    * Redistributions of source code must retain the above copyright
 0006           ;      notice, this list of conditions and the following disclaimer.
 0006           ; 
 0006           ;    * Redistributions in binary form must reproduce the above copyright
 0006           ;      notice, this list of conditions and the following disclaimer in
 0006           ;      the documentation and/or other materials provided with the
 0006           ;      distribution.
 0006           ; 
 0006           ;    * Neither the name of the copyright holders nor the names of
 0006           ;      contributors may be used to endorse or promote products derived
 0006           ;      from this software without specific prior written permission.
 0006           ; 
 0006           ;    * Source code can be used for academic purpose. 
 0006           ;        For commercial use permission form the author needs to be taken.
 0006           ; 
 0006           ;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 0006           ;   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 0006           ;   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 0006           ;   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 0006           ;   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 0006           ;   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 0006           ;   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 0006           ;   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 0006           ;   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 0006           ;   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 0006           ;   POSSIBILITY OF SUCH DAMAGE. 
 0006           ; 
 0006           ;   Software released under Creative Commence cc by-nc-sa licence.
 0006           ;   For legal information refer to: 
 0006           ;   http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode
 0006           ; 
 0006           ; ********************************************************************************/
 0006           ; 
 0006           ; 
 0006           ; 
 0006           ; 
 0006           ; #include "hexapod_macro.h"
 0006           ; #include "hexapod.h"
 0006           ; #include "gait.h"
 0006           ; #include "hexapod_motions.h"
 0006           ; #include "hexapod_basic.h"
 0006           ; 
 0006           ; 
 0006           ; extern unsigned char data;//!< The keyborad command given by user
 0006           ; 
 0006           ; 
 0006           ; /**
 0006           ; Controls hexapod through keyboard using ZigBee communication
 0006           ; */
 0006           ; void keyboard_control(void) {
 0006                   .dbline 73
 0006           ;       
 0006           ;       static char change = 15;
 0006           ;       
 0006           ;       switch(data) {
 0006 40910000          lds R20,_data
 000A 5527              clr R21
 000C 4C33              cpi R20,60
 000E E0E0              ldi R30,0
 0010 5E07              cpc R21,R30
 0012 09F4              brne X6
 0014 70C0              xjmp L20
 0016           X6:
 0016           X0:
 0016 4E33              cpi R20,62
 0018 E0E0              ldi R30,0
 001A 5E07              cpc R21,R30
 001C 09F4              brne X7
 001E 68C0              xjmp L19
 0020           X7:
 0020           X1:
 0020 4C33              cpi R20,60
 0022 E0E0              ldi R30,0
 0024 5E07              cpc R21,R30
 0026 0CF4              brge X8
 0028 69C0              xjmp L3
 002A           X8:
 002A           X2:
 002A           L21:
 002A 4136              cpi R20,97
 002C E0E0              ldi R30,0
 002E 5E07              cpc R21,R30
 0030 0CF4              brge X9
 0032 64C0              xjmp L3
 0034           X9:
 0034           X3:
 0034 8AE7              ldi R24,122
 0036 90E0              ldi R25,0
 0038 8417              cp R24,R20
 003A 9507              cpc R25,R21
 003C 0CF4              brge X10
 003E 5EC0              xjmp L3
 0040           X10:
 0040           X4:
 0040 03E0              ldi R16,3
 0042 10E0              ldi R17,0
 0044 9A01              movw R18,R20
 0046 0E940000          xcall empy16s
 004A F801              movw R30,R16
 004C 80E0              ldi R24,<L22-291
 004E 90E0              ldi R25,>L22-291
 0050 E80F              add R30,R24
 0052 F91F              adc R31,R25
 0054 2790              elpm R2,Z+
 0056 3790              elpm R3,Z+
 0058 0690              elpm R0,Z
 005A 0CBE              out 0x3C,R0
 005C F101              movw R30,R2
 005E 1994              eijmp
 0060           X5:
 0060                   .dbfile D:\BUILDI~1\keyboard.c
 0060                   .dbline 73
 0060           L6:
 0060                   .dbline 75
 0060           ;          case 's':
 0060           ;                       servo_calibration();
 0060 0E940000          xcall _servo_calibration
 0064                   .dbline 76
 0064           ;                       break;
 0064 4DC0              xjmp L4
 0066           L7:
 0066                   .dbline 78
 0066           ;          case 'w': 
 0066           ;                tripod_gait(LEG_2, 1);
 0066 21E0              ldi R18,1
 0068 02E0              ldi R16,2
 006A 0E940000          xcall _tripod_gait
 006E                   .dbline 79
 006E           ;                        break; 
 006E 48C0              xjmp L4
 0070           L8:
 0070                   .dbline 81
 0070           ;          case 'e': 
 0070           ;                tripod_gait(LEG_1, 1);
 0070 21E0              ldi R18,1
 0072 01E0              ldi R16,1
 0074 0E940000          xcall _tripod_gait
 0078                   .dbline 82
 0078           ;                        break;
 0078 43C0              xjmp L4
 007A           L9:
 007A                   .dbline 84
 007A           ;          case 'd': 
 007A           ;                tripod_gait(LEG_4, 1);
 007A 21E0              ldi R18,1
 007C 04E0              ldi R16,4
 007E 0E940000          xcall _tripod_gait
 0082                   .dbline 85
 0082           ;                        break;
 0082 3EC0              xjmp L4
 0084           L10:
 0084                   .dbline 87
 0084           ;          case 'x': 
 0084           ;                tripod_gait(LEG_5, 1);
 0084 21E0              ldi R18,1
 0086 05E0              ldi R16,5
 0088 0E940000          xcall _tripod_gait
 008C                   .dbline 88
 008C           ;                        break;
 008C 39C0              xjmp L4
 008E           L11:
 008E                   .dbline 90
 008E           ;          case 'z': 
 008E           ;                tripod_gait(LEG_6, 1);
 008E 21E0              ldi R18,1
 0090 06E0              ldi R16,6
 0092 0E940000          xcall _tripod_gait
 0096                   .dbline 91
 0096           ;                        break;
 0096 34C0              xjmp L4
 0098           L12:
 0098                   .dbline 93
 0098           ;          case 'a': 
 0098           ;                tripod_gait(LEG_3, 1);
 0098 21E0              ldi R18,1
 009A 03E0              ldi R16,3
 009C 0E940000          xcall _tripod_gait
 00A0                   .dbline 94
 00A0           ;                        break;         
 00A0 2FC0              xjmp L4
 00A2           L13:
 00A2                   .dbline 96
 00A2           ;          case 't': 
 00A2           ;                       two_leg_gait(1, 2, 1);
 00A2 81E0              ldi R24,1
 00A4 90E0              ldi R25,0
 00A6 9983              std y+1,R25
 00A8 8883              std y+0,R24
 00AA 22E0              ldi R18,2
 00AC 01E0              ldi R16,1
 00AE 0E940000          xcall _two_leg_gait
 00B2                   .dbline 97
 00B2           ;                       break;
 00B2 26C0              xjmp L4
 00B4           L14:
 00B4                   .dbline 99
 00B4           ;          case 'b':
 00B4           ;                       buzzer_on_off();
 00B4 0E940000          xcall _buzzer_on_off
 00B8                   .dbline 100
 00B8           ;                       break;
 00B8 23C0              xjmp L4
 00BA           L15:
 00BA                   .dbline 102
 00BA           ;          case 'p':
 00BA           ;                       pose(LEG_1, LEG_2, 10);
 00BA 8AE0              ldi R24,10
 00BC 90E0              ldi R25,0
 00BE 9983              std y+1,R25
 00C0 8883              std y+0,R24
 00C2 22E0              ldi R18,2
 00C4 01E0              ldi R16,1
 00C6 0E940000          xcall _pose
 00CA                   .dbline 103
 00CA           ;                       break;
 00CA 1AC0              xjmp L4
 00CC           L16:
 00CC                   .dbline 105
 00CC           ;          case 'k':
 00CC           ;               sway(24, CLOCK_WISE);
 00CC 21E0              ldi R18,1
 00CE 08E1              ldi R16,24
 00D0 10E0              ldi R17,0
 00D2 0E940000          xcall _sway
 00D6                   .dbline 106
 00D6           ;               break;
 00D6 14C0              xjmp L4
 00D8           L17:
 00D8                   .dbline 108
 00D8           ;          case 'l':
 00D8           ;               dance(4,5,6);
 00D8 86E0              ldi R24,6
 00DA 90E0              ldi R25,0
 00DC 9983              std y+1,R25
 00DE 8883              std y+0,R24
 00E0 25E0              ldi R18,5
 00E2 04E0              ldi R16,4
 00E4 0E940000          xcall _dance
 00E8                   .dbline 109
 00E8           ;               break;                          
 00E8 0BC0              xjmp L4
 00EA           L18:
 00EA                   .dbline 111
 00EA           ;          case 'c' :
 00EA           ;               climb();
 00EA 0E940000          xcall _climb
 00EE                   .dbline 112
 00EE           ;                       break;
 00EE 08C0              xjmp L4
 00F0           L19:
 00F0                   .dbline 114
 00F0           ;          case '>' :
 00F0           ;                   robot_rotate_clockwise_7_5();
 00F0 0E940000          xcall _robot_rotate_clockwise_7_5
 00F4                   .dbline 115
 00F4           ;                       break;  
 00F4 05C0              xjmp L4
 00F6           L20:
 00F6                   .dbline 117
 00F6           ;          case '<' :
 00F6           ;                   robot_rotate_anticlockwise_7_5();
 00F6 0E940000          xcall _robot_rotate_anticlockwise_7_5
 00FA                   .dbline 118
 00FA           ;                       break;          
 00FA 02C0              xjmp L4
 00FC           L3:
 00FC                   .dbline 254
 00FC           ;                       
 00FC           ;          /*case '+':
 00FC           ;               angle_change(LEG_1, MOTOR_A, change);
 00FC           ;                       break;
 00FC           ;          case '-':
 00FC           ;               angle_change(LEG_1, MOTOR_A, -change);
 00FC           ;                       break;  
 00FC           ;          case '*':
 00FC           ;               change += 5;
 00FC           ;                       if(change > 90)
 00FC           ;                           change = 90;
 00FC           ;                       break;
 00FC           ;          case '/':
 00FC           ;               change += -5;
 00FC           ;                       if(change < 5)
 00FC           ;                          change = 5;
 00FC           ;                       break;*/
 00FC           ;                       
 00FC           ;                       
 00FC           ;               /*      
 00FC           ;          case '`':
 00FC           ;               angle_change(LEG_1, MOTOR_A, change);
 00FC           ;                       break;
 00FC           ;          case '~':
 00FC           ;               angle_change(LEG_1, MOTOR_A, -change);
 00FC           ;                       break;
 00FC           ;          case '1':
 00FC           ;               angle_change(LEG_1, MOTOR_B, change);
 00FC           ;                       break;
 00FC           ;          case '!':
 00FC           ;               angle_change(LEG_1, MOTOR_B, -change);
 00FC           ;                       break;
 00FC           ;               case '2':
 00FC           ;               angle_change(LEG_1, MOTOR_C, change);
 00FC           ;                       break;
 00FC           ;          case '@':
 00FC           ;               angle_change(LEG_1, MOTOR_C, -change);
 00FC           ;                       break;
 00FC           ;                       
 00FC           ;               case '3':
 00FC           ;               angle_change(LEG_2, MOTOR_A, change);
 00FC           ;                       break;
 00FC           ;          case '#':
 00FC           ;               angle_change(LEG_2, MOTOR_A, -change);
 00FC           ;                       break;
 00FC           ;          case '4':
 00FC           ;               angle_change(LEG_2, MOTOR_B, change);
 00FC           ;                       break;
 00FC           ;          case '$':
 00FC           ;               angle_change(LEG_2, MOTOR_B, -change);
 00FC           ;                       break;
 00FC           ;               case '5':
 00FC           ;               angle_change(LEG_2, MOTOR_C, change);
 00FC           ;                       break;
 00FC           ;          case '%':
 00FC           ;               angle_change(LEG_2, MOTOR_C, -change);
 00FC           ;                       break;
 00FC           ;               
 00FC           ;               case '6':
 00FC           ;               angle_change(LEG_3, MOTOR_A, change);
 00FC           ;                       break;
 00FC           ;          case '^':
 00FC           ;               angle_change(LEG_3, MOTOR_A, -change);
 00FC           ;                       break;
 00FC           ;          case '7':
 00FC           ;               angle_change(LEG_3, MOTOR_B, change);
 00FC           ;                       break;
 00FC           ;          case '&':
 00FC           ;               angle_change(LEG_3, MOTOR_B, -change);
 00FC           ;                       break;
 00FC           ;               case '8':
 00FC           ;               angle_change(LEG_3, MOTOR_C, change);
 00FC           ;                       break;
 00FC           ;          case '*':
 00FC           ;               angle_change(LEG_3, MOTOR_C, -change);
 00FC           ;                       break;
 00FC           ;               
 00FC           ;               case '9':
 00FC           ;               angle_change(LEG_4, MOTOR_A, change);
 00FC           ;                       break;
 00FC           ;          case '(':
 00FC           ;               angle_change(LEG_4, MOTOR_A, -change);
 00FC           ;                       break;
 00FC           ;          case '0':
 00FC           ;               angle_change(LEG_4, MOTOR_B, change);
 00FC           ;                       break;
 00FC           ;          case ')':
 00FC           ;               angle_change(LEG_4, MOTOR_B, -change);
 00FC           ;                       break;
 00FC           ;               case '-':
 00FC           ;               angle_change(LEG_4, MOTOR_C, change);
 00FC           ;                       break;
 00FC           ;          case '_':
 00FC           ;               angle_change(LEG_4, MOTOR_C, -change);
 00FC           ;                       break;
 00FC           ;               
 00FC           ;               case '=':
 00FC           ;               angle_change(LEG_5, MOTOR_A, change);
 00FC           ;                       break;
 00FC           ;          case '+':
 00FC           ;               angle_change(LEG_5, MOTOR_A, -change);
 00FC           ;                       break;
 00FC           ;          case '[':
 00FC           ;               angle_change(LEG_5, MOTOR_B, change);
 00FC           ;                       break;
 00FC           ;          case '{':
 00FC           ;               angle_change(LEG_5, MOTOR_B, -change);
 00FC           ;                       break;
 00FC           ;               case ']':
 00FC           ;               angle_change(LEG_5, MOTOR_C, change);
 00FC           ;                       break;
 00FC           ;          case '}':
 00FC           ;               angle_change(LEG_5, MOTOR_C, -change);
 00FC           ;                       break;
 00FC           ;               
 00FC           ;               case '\\':
 00FC           ;               angle_change(LEG_6, MOTOR_A, change);
 00FC           ;                       break;
 00FC           ;          case '|':
 00FC           ;               angle_change(LEG_6, MOTOR_A, -change);
 00FC           ;                       break;
 00FC           ;          case ';':
 00FC           ;               angle_change(LEG_6, MOTOR_B, change);
 00FC           ;                       break;
 00FC           ;          case ':':
 00FC           ;               angle_change(LEG_6, MOTOR_B, -change);
 00FC           ;                       break;
 00FC           ;               case '\'':
 00FC           ;               angle_change(LEG_6, MOTOR_C, change);
 00FC           ;                       break;
 00FC           ;          case '\"':
 00FC           ;               angle_change(LEG_6, MOTOR_C, -change);
 00FC           ;                       break;
 00FC           ;               */              
 00FC           ;               default :
 00FC           ;                   buzzer_on();
 00FC 0E940000          xcall _buzzer_on
 0100                   .dbline 255
 0100           ;                       break;
 0100           L4:
 0100                   .dbline 258
 0100           ;       }                  
 0100           ;               
 0100           ;       data = '';
 0100 2224              clr R2
 0102 20920000          sts _data,R2
 0106                   .dbline -2
 0106           L1:
 0106                   .dbline 0 ; func end
 0106 2296              adiw R28,2
 0108 5991              ld R21,y+
 010A 4991              ld R20,y+
 010C 0895              ret
 010E                   .dbend
 010E           ; }
