#include "hexapod_macro.h"
#include "hexapod.h"



unsigned char angleArr[6][3];
static unsigned char dirMirror = DIR_MIRROR_LEG_1_2;

void initializeAngles() {
	 int i,j;
	 
	 for (i=0; i < NO_OF_LEGS; i++) {
	 	 for(j=0; j < NO_OF_SERVOS_IN_EACH_LEG; j++) {
		 		  angleArr[i][j] = INITIAL_ANGLE;
		 }
	 }
}

void setAngle(unsigned char arm, unsigned char motor, unsigned char angle);
unsigned char getAngle(unsigned char arm, unsigned char motor);

void angle(unsigned char arm, unsigned char motor, unsigned char angle) {
	setAngle(arm, motor, angle); 
	switch (arm) {
	case 1:
		if (motor == MOTOR_A)
			angle_1A(angle);
		else if (motor == MOTOR_B)
			angle_1B(angle);
		else if (motor == MOTOR_C)
			angle_1C(angle);
		break;
	case 2:
		if (motor == MOTOR_A)
			angle_2A(angle);
		else if (motor == MOTOR_B)
			angle_2B(angle);
		else if (motor == MOTOR_C)
			angle_2C(angle);
		break;
	case 3:
		if (motor == MOTOR_A)
			angle_3A(angle);
		else if (motor == MOTOR_B)
			angle_3B(angle);
		else if (motor == MOTOR_C)
			angle_3C(angle);
		break;
	case 4:
		if (motor == MOTOR_A)
			angle_4A(angle);
		else if (motor == MOTOR_B)
			angle_4B(180 - angle);
		else if (motor == MOTOR_C)
			angle_4C(180 - angle);
		break;
	case 5:
		if (motor == MOTOR_A)
			angle_5A(angle);
		else if (motor == MOTOR_B)
			angle_5B(180 - angle);
		else if (motor == MOTOR_C)
			angle_5C(180 - angle);
		break;
	case 6:
		if (motor == MOTOR_A)
			angle_6A(angle);
		else if (motor == MOTOR_B)
			angle_6B(180 - angle);
		else if (motor == MOTOR_C)
			angle_6C(180 - angle);
		break;
	}
}

void angle_XA(unsigned char angle) {
	angle_1A(angle);
	angle_2A(angle);
	angle_3A(angle);
	angle_4A(angle);
	angle_5A(angle);
	angle_6A(angle);
}

void angle_XB(unsigned char angle) {
	angle_1B(angle);
	angle_2B(angle);
	angle_3B(angle);
	angle_4B(180 - angle);
	angle_5B(180 - angle);
	angle_6B(180 - angle);
}

void angle_XC(unsigned char angle) {
	angle_1C(angle);
	angle_2C(angle);
	angle_3C(angle);
	angle_4C(180 - angle);
	angle_5C(180 - angle);
	angle_6C(180 - angle);
}




void swap(unsigned char *a, unsigned char *b) {
	 unsigned char t = *a;
	 *a = *b;
	 *b = t;
}

void setAngle(unsigned char arm, unsigned char motor, unsigned char angle) {
	 angleArr[arm][motor - 'A'] = angle;
}

unsigned char getAngle(unsigned char arm, unsigned char motor) {
	 return angleArr[arm][motor - 'A'];
}

void buzzer_on_off() {
     static int flag = 1;
	 if(flag) {
	     buzzer_on();
	 	 flag = 0;
	 }else {
	     buzzer_off();
	     flag = 1;  
	 }
}

void angle_change(unsigned char arm, unsigned char motor, char change) {
    
	unsigned char angle1;
	
	 if(change + getAngle(arm, motor) < DEGREE_MIN || change + getAngle(arm, motor)  > 240) {
	 		   angle1 = DEGREE_MIN;
			   //buzzer_on();
	} else if(change + getAngle(arm, motor)  > DEGREE_MAX) {
	           angle1 = DEGREE_MAX;
			   //buzzer_on();
	} else {
	 		   angle1 = change + getAngle(arm, motor);
	}
	angle(arm, motor, angle1);
	
}

void setMirrorDir(unsigned char dir) {
	 dirMirror = dir;
}

unsigned char getMirrorDir(void ) {
	 return dirMirror;
}

unsigned char getMirrorArm(unsigned char arm) {
		 int arr_mirror[3][6] =  {{LEG_2, LEG_1, LEG_4, LEG_3, LEG_6, LEG_5}, 
		 	 				   	{LEG_6, LEG_3, LEG_2, LEG_5, LEG_4, LEG_1}, 
								{LEG_4, LEG_5, LEG_6, LEG_1, LEG_2, LEG_3}};
		 return arr_mirror[getMirrorDir()][arm - 1];
}

void angleMirror(unsigned char arm, unsigned char motor, unsigned char angleSet) {
	 unsigned char arm_mirror = getMirrorArm(arm);
	 angle(arm, motor, angleSet);
	 if(motor == MOTOR_A)
	 	 angle(arm_mirror, motor, 180 - angleSet);
	 else
	 	 angle(arm_mirror, motor, angleSet);
	 	  		  
}

void angleMirrorChange(unsigned char arm, unsigned char motor, char angleChange) {
	 unsigned char arm_mirror = getMirrorArm(arm);
	 angle_change(arm, motor, angleChange);
	 angle_change(arm_mirror, motor, angleChange);
}




